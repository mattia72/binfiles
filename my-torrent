#!/bin/bash 
set -x
screen_session_name="CTorrent-Screen-Session"
screen_prog_name="byobu-screen"
screen_pattern=".*SCREEN\.real.*"
ready_cmd="-X kdialog --msgbox" #todo
torrent_client=`which ctorrent`
torrent_param='-S localhost:2780'
STATUS_OUT="ctorrent.status"
seed_time_limit=49
ratio_limit="1.10"

pushd /home/mata/Letöltések/downloads
touch $STATUS_OUT 

function start_screen()
{
	found_screen=$(screen -ls | grep "$screen_session_name")
	if [ -z "$found_screen" ]
	then
	  #	echo "Create new screen session..."
		screen -dmS "$screen_session_name"
	fi
}
function start_lynx()
{
  title="lynx"
  cmd="/usr/bin/lynx"
  param="http://localhost:2780/"
	echo "Create window $screen_session_name::$title"
	screen -S "$screen_session_name" -X screen -t "$title" "$cmd" "$param"
}
function start_ctcs()
{
	title="CTC-Server"
  cmd="/home/mata/bin/ctcs"
	found=$(pgrep -lf "$cmd")
	if [ -z "$found" ]
	then
		echo "Create window $screen_session_name::$title"
		screen -S "$screen_session_name" -X screen -t "$title" "$cmd"
	fi
}

function start_ctorrents()
{
  i=0
	while [ "$i" -lt "${#torrent_list[@]}" ]
	do
    #    echo "$i : ${torrent_list[$i]}"
    #     read
		title="${torrent_list[$i]%.torrent}"    #cut .torrent from the end
		title="${title//\[*\]/}" #cut [..]
    found=$(pgrep -lf ".*$torrent_client.*$title")
    #     echo "- $title - $torrent_client.*${torrent_list[$i]} -"
    #     read
		if [ -z "$found" ]
		then
			echo "Create window $screen_session_name::$title"

      #get ratio and time from status file
      ratio=$(sed '/'"$title"'/!d; s/.*r=\([0-9.]*\).*/\1/' $STATUS_OUT)
      time=$(sed '/'"$title"'/!d; s/.*t=\([0-9.]*\).*/\1/' $STATUS_OUT)
      #echo "1. r=$ratio t=$time"
      if [[ "$ratio" == "" ]]; then
        ratio="$ratio_limit"
      else
        ratio=$(echo "$ratio_limit - $ratio" | bc -q)
      fi

      if [[ "$time" == "" ]]; then
        time="$seed_time_limit"
      else
        time=$(echo "$seed_time_limit - $time" | bc -q)
      fi
      #echo "2. r=$ratio t=$time"
      #read
      if [[ `echo "$time == 0 || $ratio == 0" | bc -q` == 1 ]]; then
        echo "Torrent `$title` seeding completed yet."
        mv -v "${torrent_list[$i]}" "${torrent_list[$i]}.ready"
        continue
      fi

			#screen -S "$screen_session_name" -X screen -t "$title" echo "$torrent_client $torrent_param -E $ratio -e $time ${torrent_list[$i]}"
			screen -S "$screen_session_name" -X screen -t "$title" $torrent_client $torrent_param -E $ratio -e $time "${torrent_list[$i]}"
      #read
      echo "${torrent_list[$i]} started with r=$ratio t=$time" 

			echo "Sleep a minute... waiting for integrity check..."
			sleep 1m #wait for integrity check...
		fi
    (( i++ ))
	done
}

function start_write_status()
{
	status_script="/home/mata/bin/my-torrent-status"
	title="Status"
	found=$(pgrep -lf "$status_script")
	if [ -z "$found" ]
	then
		echo "Create window for $status_script"
		screen -S "$screen_session_name" -X screen -t "$title" $status_script "1m"
		screen -S "$screen_session_name" -X screen -t "$title" echo "Endless status writer started..."
	fi
}

echo "Starts ctorrent for all new torrent file in `pwd`"
echo -n "Press enter to continue, or Ctrl-C to abort!"
read

start_screen

IFS='
' read -d '' -a torrent_list< <(ls -1t *.torrent) # <(command) named pipe, olyan mintha file lenne

echo "${#torrent_list[*]} torrent file found."
i=0
while [ $i -lt ${#torrent_list[*]} ]
do
  echo "$i: ${torrent_list[$i]}"
  ((i++))
done

if [[ ${#torrent_list[@]} > 0 ]]
then
	start_ctcs
fi

start_ctorrents
start_write_status

if [[ ${#torrent_list[@]} > 0 ]]
then
	start_lynx
fi

popd
